// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	brc20 "btc_order/internal/handler/brc20"
	btcorder "btc_order/internal/handler/btc/order"
	btcprice "btc_order/internal/handler/btc/price"
	category "btc_order/internal/handler/category"
	email "btc_order/internal/handler/email"
	market "btc_order/internal/handler/market"
	project "btc_order/internal/handler/project"
	"btc_order/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/email/subscribe",
				Handler: email.SubscribeHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/email/unsubscribe",
				Handler: email.UnsubscribeHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/email/status",
				Handler: email.GetSubscribeStatusHandler(serverCtx),
			},
		},
		rest.WithPrefix("/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/btc/order",
				Handler: btcorder.CreatedOrdOrderHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/btc/order/list/:receiveAddress",
				Handler: btcorder.GetOrderListByReceiveAddressHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/btc/order/:id",
				Handler: btcorder.PutOrderByIdHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/btc/order/:id",
				Handler: btcorder.GetOrderByIdHandler(serverCtx),
			},
		},
		rest.WithPrefix("/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/project/list",
				Handler: project.GetProjectListHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/project/:id",
				Handler: project.GetProjectByIdHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/project/tick/:id",
				Handler: project.GetProjectTickByIdHandler(serverCtx),
			},
		},
		rest.WithPrefix("/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/btc/price",
				Handler: btcprice.GetBtcPirceHandler(serverCtx),
			},
		},
		rest.WithPrefix("/v1"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.RateLimit, serverCtx.Cache},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/market/btc/price",
					Handler: market.GetBtcPriceHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/v1"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.RateLimit, serverCtx.Cache},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/category/latest",
					Handler: category.GetCategoryMarketingHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/v1/market"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.RateLimit, serverCtx.Cache},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/market/latest",
					Handler: brc20.GetTickerMarketInfoHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/market/list/latest",
					Handler: brc20.GetTickerMarketListHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/v1"),
	)
}
